"use strict";
/* jshint newcap:false */


var EventEmitter = require("events-light");
var SubscriptionTracker = require("listener-tracker");
var inherit = require("raptor-util/inherit");
var componentsUtil = require("@internal/components-util");
var componentLookup = componentsUtil._i_;
var destroyNodeRecursive = componentsUtil._O_;
var defaultCreateOut = require("../createOut");
var domInsert = require("../dom-insert");
var RenderResult = require("../RenderResult");
var morphdom = require("../vdom/morphdom");
var getComponentsContext =
require("./ComponentsContext").R_;
var domData = require("./dom-data");
var eventDelegation = require("./event-delegation");
var updateManager = require("./update-manager");
var componentsByDOMNode = domData._l_;
var keyedElementsByComponentId = domData._k_;
var CONTEXT_KEY = "__subtree_context__";

var hasOwnProperty = Object.prototype.hasOwnProperty;
var slice = Array.prototype.slice;

var COMPONENT_SUBSCRIBE_TO_OPTIONS;
var NON_COMPONENT_SUBSCRIBE_TO_OPTIONS = {
  addDestroyListener: false
};

var emit = EventEmitter.prototype.emit;
var ELEMENT_NODE = 1;

function removeListener(removeEventListenerHandle) {
  removeEventListenerHandle();
}

function walkFragments(fragment) {
  var node;

  while (fragment) {
    node = fragment.firstChild;

    if (!node) {
      break;
    }

    fragment = node.fragment;
  }

  return node;
}

function handleCustomEventWithMethodListener(
component,
targetMethodName,
args,
extraArgs)
{
  // Remove the "eventType" argument
  args.push(component);

  if (extraArgs) {
    args = extraArgs.concat(args);
  }

  var targetComponent = componentLookup[component.V_];
  var targetMethod =
  typeof targetMethodName === "function" ?
  targetMethodName :
  targetComponent[targetMethodName];
  if (!targetMethod) {
    throw Error("Method not found: " + targetMethodName);
  }

  targetMethod.apply(targetComponent, args);
}

function resolveKeyHelper(key, index) {
  return index ? key + "_" + index : key;
}

function resolveComponentIdHelper(component, key, index) {
  return component.id + "-" + resolveKeyHelper(key, index);
}

/**
 * This method is used to process "update_<stateName>" handler functions.
 * If all of the modified state properties have a user provided update handler
 * then a rerender will be bypassed and, instead, the DOM will be updated
 * looping over and invoking the custom update handlers.
 * @return {boolean} Returns true if if the DOM was updated. False, otherwise.
 */
function processUpdateHandlers(component, stateChanges, oldState) {
  var handlerMethod;
  var handlers;

  for (var propName in stateChanges) {
    if (hasOwnProperty.call(stateChanges, propName)) {
      var handlerMethodName = "update_" + propName;

      handlerMethod = component[handlerMethodName];
      if (handlerMethod) {
        (handlers || (handlers = [])).push([propName, handlerMethod]);
      } else {
        // This state change does not have a state handler so return false
        // to force a rerender
        return;
      }
    }
  }

  // If we got here then all of the changed state properties have
  // an update handler or there are no state properties that actually
  // changed.
  if (handlers) {
    // Otherwise, there are handlers for all of the changed properties
    // so apply the updates using those handlers

    handlers.forEach(function (handler) {
      var propertyName = handler[0];
      handlerMethod = handler[1];

      var newValue = stateChanges[propertyName];
      var oldValue = oldState[propertyName];
      handlerMethod.call(component, newValue, oldValue);
    });

    component._u_();
    component._p_();
  }

  return true;
}

function checkInputChanged(existingComponent, oldInput, newInput) {
  if (oldInput != newInput) {
    if (oldInput == null || newInput == null) {
      return true;
    }

    var oldKeys = Object.keys(oldInput);
    var newKeys = Object.keys(newInput);
    var len = oldKeys.length;
    if (len !== newKeys.length) {
      return true;
    }

    for (var i = len; i--;) {
      var key = oldKeys[i];
      if (!(key in newInput && oldInput[key] === newInput[key])) {
        return true;
      }
    }
  }

  return false;
}

var componentProto;

/**
 * Base component type.
 *
 * NOTE: Any methods that are prefixed with an underscore should be considered private!
 */
function Component(id) {
  EventEmitter.call(this);
  this.id = id;
  this.y_ = null;
  this._A_ = null;
  this.ag_ = null;
  this._s_ = null;
  this.W_ = null; // Used to keep track of bubbling DOM events for components rendered on the server
  this.U_ = null;
  this.V_ = null;
  this.ah_ = null;
  this.N_ = undefined;
  this._t_ = false;
  this.ai_ = undefined;
  this.H_ = false;
  this.___ = false;
  this.aj_ = false;
  this.ak_ = false;
  this.A_ = undefined;

  var ssrKeyedElements = keyedElementsByComponentId[id];

  if (ssrKeyedElements) {
    this.J_ = ssrKeyedElements;
    delete keyedElementsByComponentId[id];
  } else {
    this.J_ = {};
  }
}

Component.prototype = componentProto = {
  w_: true,

  subscribeTo: function (target) {
    if (!target) {
      throw TypeError();
    }

    var subscriptions =
    this.ag_ || (
    this.ag_ = new SubscriptionTracker());

    var subscribeToOptions = target.w_ ?
    COMPONENT_SUBSCRIBE_TO_OPTIONS :
    NON_COMPONENT_SUBSCRIBE_TO_OPTIONS;

    return subscriptions.subscribeTo(target, subscribeToOptions);
  },

  emit: function (eventType) {
    var customEvents = this.U_;
    var target;

    if (customEvents && (target = customEvents[eventType])) {
      var targetMethodName = target[0];
      var isOnce = target[1];
      var extraArgs = target[2];
      var args = slice.call(arguments, 1);

      handleCustomEventWithMethodListener(
        this,
        targetMethodName,
        args,
        extraArgs
      );

      if (isOnce) {
        delete customEvents[eventType];
      }
    }

    return emit.apply(this, arguments);
  },
  getElId: function (key, index) {
    if (!key) {
      return this.id;
    }
    return resolveComponentIdHelper(this, key, index);
  },
  getEl: function (key, index) {
    if (key) {
      var resolvedKey = resolveKeyHelper(key, index);
      var keyedElement = this.J_["@" + resolvedKey];
      if (keyedElement && keyedElement.nodeType === 12 /** FRAGMENT_NODE */) {
        // eslint-disable-next-line no-constant-condition






        return walkFragments(keyedElement);
      }

      return keyedElement;
    } else {
      return this.el;
    }
  },
  getEls: function (key) {
    key = key + "[]";

    var els = [];
    var i = 0;
    var el;
    while (el = this.getEl(key, i)) {
      els.push(el);
      i++;
    }
    return els;
  },
  getComponent: function (key, index) {
    var rootNode = this.J_["@" + resolveKeyHelper(key, index)];
    if (/\[\]$/.test(key)) {
      // eslint-disable-next-line no-constant-condition





      rootNode = rootNode && rootNode[Object.keys(rootNode)[0]];
    }
    return rootNode && componentsByDOMNode.get(rootNode);
  },
  getComponents: function (key) {
    var lookup = this.J_["@" + key + "[]"];
    return lookup ?
    Object.keys(lookup).
    map(function (key) {
      return componentsByDOMNode.get(lookup[key]);
    }).
    filter(Boolean) :
    [];
  },
  destroy: function () {
    if (this.H_) {
      return;
    }

    var root = this._A_;

    this._K_();

    var nodes = root.nodes;

    nodes.forEach(function (node) {
      destroyNodeRecursive(node);

      if (eventDelegation.al_(node) !== false) {
        node.parentNode.removeChild(node);
      }
    });

    root.detached = true;

    delete componentLookup[this.id];
    this.J_ = {};
  },

  _K_: function () {
    if (this.H_) {
      return;
    }

    this.am_();
    this.H_ = true;

    componentsByDOMNode.set(this._A_, undefined);

    this._A_ = null;

    // Unsubscribe from all DOM events
    this._r_();

    var subscriptions = this.ag_;
    if (subscriptions) {
      subscriptions.removeAllListeners();
      this.ag_ = null;
    }
  },

  isDestroyed: function () {
    return this.H_;
  },
  get state() {
    return this.y_;
  },
  set state(newState) {
    var state = this.y_;
    if (!state && !newState) {
      return;
    }

    if (!state) {
      state = this.y_ = new this.O_(this);
    }

    state.an_(newState || {});

    if (state.aj_) {
      this.ao_();
    }

    if (!newState) {
      this.y_ = null;
    }
  },
  setState: function (name, value) {
    var state = this.y_;

    if (!state) {
      state = this.y_ = new this.O_(this);
    }
    if (typeof name == "object") {
      // Merge in the new state with the old state
      var newState = name;
      for (var k in newState) {
        if (hasOwnProperty.call(newState, k)) {
          state.ap_(k, newState[k], true /* ensure:true */);
        }
      }
    } else {
      state.ap_(name, value, true /* ensure:true */);
    }
  },

  setStateDirty: function (name, value) {
    var state = this.y_;

    if (arguments.length == 1) {
      value = state[name];
    }

    state.ap_(
      name,
      value,
      true /* ensure:true */,
      true /* forceDirty:true */
    );
  },

  replaceState: function (newState) {
    this.y_.an_(newState);
  },

  get input() {
    return this.N_;
  },
  set input(newInput) {
    if (this.ak_) {
      this.N_ = newInput;
    } else {
      this._g_(newInput);
    }
  },

  _g_: function (newInput, onInput, out) {
    onInput = onInput || this.onInput;
    var updatedInput;

    var oldInput = this.N_;
    this.N_ = undefined;
    this.aq_ = out && out[CONTEXT_KEY] || this.aq_;

    if (onInput) {
      // We need to set a flag to preview `this.input = foo` inside
      // onInput causing infinite recursion
      this.ak_ = true;
      updatedInput = onInput.call(this, newInput || {}, out);
      this.ak_ = false;
    }

    newInput = this.ah_ = updatedInput || newInput;

    if (this.aj_ = checkInputChanged(this, oldInput, newInput)) {
      this.ao_();
    }

    if (this.N_ === undefined) {
      this.N_ = newInput;
      if (newInput && newInput.$global) {
        this.ai_ = newInput.$global;
      }
    }

    return newInput;
  },

  forceUpdate: function () {
    this.aj_ = true;
    this.ao_();
  },

  ao_: function () {
    if (!this.___) {
      this.___ = true;
      updateManager.ar_(this);
    }
  },

  update: function () {
    if (this.H_ === true || this.as_ === false) {
      return;
    }

    var input = this.N_;
    var state = this.y_;

    if (this.aj_ === false && state !== null && state.aj_ === true) {
      if (processUpdateHandlers(this, state.at_, state.au_, state)) {
        state.aj_ = false;
      }
    }

    if (this.as_ === true) {
      // The UI component is still dirty after process state handlers
      // then we should rerender

      if (this.shouldUpdate(input, state) !== false) {
        this.av_();
      }
    }

    this._p_();
  },

  get as_() {
    return (
      this.aj_ === true ||
      this.y_ !== null && this.y_.aj_ === true);

  },

  _p_: function () {
    this.aj_ = false;
    this.___ = false;
    this.ah_ = null;
    var state = this.y_;
    if (state) {
      state._p_();
    }
  },

  shouldUpdate: function () {
    return true;
  },

  av_: function () {
    var self = this;
    var renderer = self.P_;

    if (!renderer) {
      throw TypeError();
    }

    var input = this.ah_ || this.N_;

    updateManager.aw_(function () {
      self._B_(input, false).afterInsert(self.A_);
    });

    this._p_();
  },

  _B_: function (input, isHydrate) {
    var host = this.A_;
    var globalData = this.ai_;
    var rootNode = this._A_;
    var renderer = this.P_;
    var createOut = renderer.createOut || defaultCreateOut;
    var out = createOut(globalData);
    out.sync();
    out.A_ = this.A_;
    out[CONTEXT_KEY] = this.aq_;

    var componentsContext = getComponentsContext(out);
    var globalComponentsContext = componentsContext.o_;
    globalComponentsContext.ax_ = this;
    globalComponentsContext._W_ = isHydrate;

    renderer(input, out);

    var result = new RenderResult(out);

    var targetNode = out.af_().ay_;

    morphdom(rootNode, targetNode, host, componentsContext);

    return result;
  },

  az_: function () {
    var root = this._A_;
    root.remove();
    return root;
  },

  _r_: function () {
    var eventListenerHandles = this._s_;
    if (eventListenerHandles) {
      eventListenerHandles.forEach(removeListener);
      this._s_ = null;
    }
  },

  get aA_() {
    var state = this.y_;
    return state && state.z_;
  },

  aB_: function (customEvents, scope) {
    var finalCustomEvents = this.U_ = {};
    this.V_ = scope;

    customEvents.forEach(function (customEvent) {
      var eventType = customEvent[0];
      var targetMethodName = customEvent[1];
      var isOnce = customEvent[2];
      var extraArgs = customEvent[3];

      if (targetMethodName) {
        finalCustomEvents[eventType] = [targetMethodName, isOnce, extraArgs];
      }
    });
  },

  get el() {
    return walkFragments(this._A_);
  },

  get els() {
    // eslint-disable-next-line no-constant-condition





    return (this._A_ ? this._A_.nodes : []).filter(
      function (el) {
        return el.nodeType === ELEMENT_NODE;
      }
    );
  },

  aC_: emit,
  aD_(input, out) {
    this.onCreate && this.onCreate(input, out);
    this.aC_("create", input, out);
  },

  aE_(out) {
    this.onRender && this.onRender(out);
    this.aC_("render", out);
  },

  _u_() {
    this.onUpdate && this.onUpdate();
    this.aC_("update");
  },

  _v_() {
    this.onMount && this.onMount();
    this.aC_("mount");
  },

  am_() {
    this.onDestroy && this.onDestroy();
    this.aC_("destroy");
  }
};

componentProto.elId = componentProto.getElId;
componentProto.aF_ = componentProto.update;
componentProto.aG_ = componentProto.destroy;

// Add all of the following DOM methods to Component.prototype:
// - appendTo(referenceEl)
// - replace(referenceEl)
// - replaceChildrenOf(referenceEl)
// - insertBefore(referenceEl)
// - insertAfter(referenceEl)
// - prependTo(referenceEl)
domInsert(
  componentProto,
  function getEl(component) {
    return component.az_();
  },
  function afterInsert(component) {
    return component;
  }
);

inherit(Component, EventEmitter);

module.exports = Component;