"use strict";
/* jshint newcap:false */

var BaseState;
var BaseComponent;
var inherit;
var req = require("@internal/require");
var registry = require("@internal/components-registry");
var jQuery = require("../../../runtime/components/legacy/jquery");
var ready = require("../../../runtime/components/legacy/ready");


var stateToJSONDef = {
  enumerable: false,
  value: function returnSelf() {
    return this;
  }
};
function noop() {}

module.exports = function defineWidget(def, renderer) {
  def = def.Widget || def;

  if (def.w_) {
    return def;
  }

  var ComponentClass = function () {};
  var proto;
  var legacyInit;

  if (typeof def === "function") {
    proto = def.prototype;
    legacyInit = def;
  } else if (typeof def === "object") {
    proto = def;
    legacyInit = def.init;
  } else {
    throw TypeError();
  }

  ComponentClass.prototype = proto;

  // We don't use the constructor provided by the user
  // since we don't invoke their constructor until
  // we have had a chance to do our own initialization.
  // Instead, we store their constructor in the "initComponent"
  // property and that method gets called later inside
  // init-components-browser.js
  function Component(id, doc) {
    BaseComponent.call(this, id, doc);
  }

  if (!proto.w_) {
    // Inherit from Component if they didn't already
    ComponentClass.prototype = Object.create(BaseComponent.prototype);
    for (var propName in proto) {
      if (proto.hasOwnProperty(propName)) {
        ComponentClass.prototype[propName] = proto[propName];
      }
    }
  }

  // The same prototype will be used by our constructor after
  // we he have set up the prototype chain using the inherit function
  proto = Component.prototype = ComponentClass.prototype;
  proto.x_ = true;

  proto.constructor = def.constructor = Component;

  Object.defineProperty(proto, "state", {
    get: function () {
      var raw = this.y_ && this.y_.z_;

      if (raw && !raw.toJSON) {
        Object.defineProperty(this.y_.z_, "toJSON", stateToJSONDef);
      }

      return raw;
    },
    set: function (newState) {
      newState = newState || {};
      // eslint-disable-next-line no-constant-condition












      this.setState(newState);
    }
  });

  Object.defineProperty(proto, "__document", {
    get: function () {
      // eslint-disable-next-line no-constant-condition



      return this.A_;
    }
  });

  Object.defineProperty(proto, "el", {
    get: function () {
      // eslint-disable-next-line no-constant-condition











      return this.B_;
    }
  });

  // get legacy methods

  proto.C_ = proto.onRender;
  Object.defineProperty(proto, "onRender", {
    get: noop,
    set: function (v) {
      proto.C_ = v;
    }
  });

  proto.D_ = proto.onUpdate;
  Object.defineProperty(proto, "onUpdate", {
    get: function () {
      return modernMountOrUpdate;
    },
    set: function (v) {
      proto.D_ = v;
    }
  });

  proto.E_ = proto.onDestroy;
  Object.defineProperty(proto, "onDestroy", {
    get: function () {
      return modernOnDestory;
    },
    set: function (v) {
      proto.E_ = v;
    }
  });

  proto.getWidget = proto.getComponent;
  proto.getWidgets = proto.getComponents;
  proto.onMount = modernMountOrUpdate;

  if (legacyInit) {
    proto.F_ = legacyInit;
  }

  // convert legacy to modern
  proto.G_ = proto.update;
  proto.update = function () {
    if (this.H_) {
      // eslint-disable-next-line no-constant-condition









      this.destroy = modernOnDestory;
      this.H_ = false;
    }
    this.I_ = true;
    if (this.B_) {
      this.onBeforeUpdate && this.onBeforeUpdate();
    }

    this.G_();
    this.I_ = false;
  };

  function modernMountOrUpdate() {
    var self = this;
    var el = this.J_["@_wbind"];
    var prevEl = this.B_;

    if (prevEl !== el) {
      this.B_ = el;

      if (prevEl) {
        this.onBeforeDestroy && this.onBeforeDestroy();
        this.E_ && this.E_();
        this.K_ = undefined;
        this.removeAllListeners();
      }

      if (el) {
        this.F_ && this.F_(this.widgetConfig || {});
        this.C_ && this.C_({ firstRender: true });
        this.K_ = legacyRender;

        // eslint-disable-next-line no-constant-condition









        el.__widget = this;

      }
    } else if (el) {
      if (prevEl) {
        this.D_ && this.D_();
      }

      if (this.L_) {
        this.C_ &&
        this.C_({ firstRender: false });
      }
    }

    this.M_ = this.N_;
    this.N_ = null;
    this.L_ = false;
  }

  function legacyRender() {
    if (!this.I_) {
      this.onBeforeUpdate && this.onBeforeUpdate();
    }

    this.L_ = true;
  }

  function modernOnDestory() {
    if (this.B_) {
      this.onBeforeDestroy && this.onBeforeDestroy();
      this.E_ && this.E_();
      this.B_ = null;
    }
  }

  // Set a flag on the constructor function to make it clear this is
  // a component so that we can short-circuit this work later
  Component.w_ = true;

  function State() {
    BaseState.apply(this, arguments);
  }
  inherit(State, BaseState);
  proto.O_ = State;

  jQuery.patchComponent(
    window.$,
    proto,
    true /* don't throw error until used if `$` is missing*/
  );

  ready.patchComponent(proto);

  if (!renderer) {
    renderer = ComponentClass.renderer || ComponentClass.prototype.renderer;
    if (renderer) {
      // Legacy support
      var createOut = renderer.createOut;
      if (typeof renderer !== "function") {
        var rendererObject = renderer;
        renderer = function (input, out) {
          var rendererFunc = rendererObject.renderer || rendererObject.render;
          rendererFunc(input, out);
        };
        renderer.createOut = createOut;
      }

      renderer.render = function (input) {
        var out = createOut();
        renderer(input, out);
        return out.end();
      };
    }
  }

  if (renderer) {
    // Add the rendering related methods as statics on the
    // new component constructor function
    Component.renderer = proto.P_ = renderer;
    Component.render = renderer.render;
    Component.renderSync = renderer.renderSync;
  }

  // eslint-disable-next-line no-constant-condition








  Component._isWidget = true;


  var template = def.template;
  if (template) {
    if (typeof template === "string") {
      template = req(template);
    }

    registry.r((template.default || template).Q_, function () {
      return Component;
    });
  }

  return Component;
};

BaseState = require("../../../runtime/components/State");
BaseComponent = require("../../../runtime/components/Component");
inherit = require("raptor-util/inherit");